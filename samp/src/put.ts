const s=require('samp-query')as any;const r=require('readline')as any;const l=r.createInterface({input:process.stdin,output:process.stdout});interface O{host:string;port:number;}interface R{address:string;hostname:string;gamemode:string;mapname:string;passworded:boolean;maxplayers:number;online:number;rules:string;players:any[];}async function i(){const ip=await q('Digite o ip do servidor: ');const port=await q('Digite a porta do servidor: ');const o:O={host:ip,port:Number(port)};try{console.info('\x1b[33m%s\x1b[0m','Buscando resultados...');const response=await sp(o);console.info('\x1b[32m%s\x1b[0m','Servidor encontrado');console.info('Online\nInformações\nBack(voltar)');const query=await q('Digite o código para acesso: ');m(query,response);}catch(error){if(error==='Host unavailable'){console.error('\x1b[31m%s\x1b[0m','Servidor não identificado');}else{console.error('\x1b[31m%s\x1b[0m','Erro ao buscar resultados');}}finally{i();}}async function m(result:string,response:R){const lR=result.toLowerCase();if(lR==='back')return i();if(lR==='online')console.info(response.players);else if(lR==='informações'||lR==='informacoes')console.info('\x1b[35m%s\x1b[0m',` ${response.address}\n${response.hostname}\n${response.gamemode}\n${response.mapname}\n${response.passworded}\n${response.maxplayers}\n${response.online}\n${response.rules}\n`);else return i();const query=await q('Digite o código para acesso: ');return m(query,response);}function q(question:string){return new Promise<string>((resolve)=>{l.question(question,resolve);});}function sp(options:O):Promise<R>{return new Promise<R>((resolve,reject)=>{s(options,(error:any,response:R)=>{if(error){reject(error);}else{resolve(response);}});});}i();
